"""
Script to run a benchmark.
We generate variable signals and run the Optimizer
measuring the time it takes to solve for each signal.

From root, run with:
'python -m src.test'
"""

import random
import numpy as np
import soundfile as sf

SR = 44_100
BIT_DEPTH = 16
PERIOD = 1.0 / SR
LOWER = -(2**BIT_DEPTH) / 2
UPPER = ((2**BIT_DEPTH) / 2) - 1
VERSION = 1

"""
A sine wave is represented by: y(t) = A*sin(w*t + phi)
- A: amplitude
- phi: phase
- w: 2*pi/T = 2*pi*f
- T: period 
"""
def signal_generator(
        y: np.ndarray,
        freq: int, 
        length: int = 1,
        phase: int = 0,
        stereo: bool = True) -> np.ndarray:
    """
    Depending on the length, we iteratively add 1s of a sine to the given signal
    of varying amplitude generated by random in a range of all possible amplitude values
    in a 16 Bit system.
    
    Parameters:
    -----------
        - y: given signal
        - freq: frequency of the sine to be constructed
        - length: array length in seconds (default is 1)
        - amp: sine amplitude
        - phase: phase of sine

    Returns:
    --------
        - y: signal
    """

    t = np.arange(0,1,PERIOD, dtype=np.float32)
    step = 0

    random.seed()
    
    for step in range(0,length):
        # the random generator isn't the best idea, since this won't be the most realistic signal
        # might even form noise-like shape (in steps of 1 second)
        # idea: another random value to determine a number of consecutive samples
        # in this sample-frame generate amp values that are spaced reasonably close together
        # this simulates natural audio a bit better

        amp = random.randrange(LOWER,UPPER,1)
        y += amp * np.sin(2*np.pi*freq*t) + phase
        step += 1

    if stereo:
        y = np.stack((y,y))
    
    file_name = "v" + VERSION + "_test.mp3"
    sf.write(file_name, y, SR)

    VERSION += 1

    return y

def main():
    """
    Generate the signal parameters and the signal;
    run the Optimizer and trace solving time;
    Plot the benchmark
    """

    
    # call the signal_generator with nonlocal version
    pass